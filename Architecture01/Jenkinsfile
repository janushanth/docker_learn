pipeline {
    agent any

    environment {
        GIT_REPO = 'https://github.com/janushanth/docker_learn.git'
        DOCKER_IMAGE = 'artifactory:8082/artifactory/docker-repo/python-flask-app' // Internal Artifactory URL
        IMAGE_TAR_PATH = "python-flask-app-${BUILD_ID}.tar" // Tar file path with build ID for versioning
        ARTIFACTORY_URL = 'http://artifactory:8082/artifactory/docker-repo/' // Artifactory URL for upload
        ARTIFACTORY_CREDENTIALS = 'jenkins' // Jenkins credentials ID for Artifactory
        DOCKER_IMAGE_TAG = "${DOCKER_IMAGE}:${BUILD_ID}" // Tag Docker image with build ID
        OLD_TAG = "${DOCKER_IMAGE}:${BUILD_ID - 1}" // Previous tag based on the previous build ID
    }

    stages {
        stage('Clone Repository') {
            steps {
                git credentialsId: 'github-credentials', url: "${GIT_REPO}", branch: 'main'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image using the Dockerfile in the specified path
                    docker.build("${DOCKER_IMAGE_TAG}", "Class_01-basic-python-dockerfile")
                }
            }
        }

        stage('Save Docker Image as Tarball') {
            steps {
                script {
                    // Save the Docker image as a tarball, tagged with the Jenkins build ID
                    sh "docker save -o ${IMAGE_TAR_PATH} ${DOCKER_IMAGE_TAG}"
                }
            }
        }

        stage('Upload Docker Image to Artifactory') {
            steps {
                script {
                    // Upload the saved tarball to Artifactory with versioning based on the build ID
                    sh "curl -u jenkins:Jenkins@123# -T ${IMAGE_TAR_PATH} ${ARTIFACTORY_URL}${IMAGE_TAR_PATH}"
                }
            }
        }

        stage('Remove Old Docker Image Tag Locally') {
            steps {
                script {
                    // Remove the old tag locally (if it exists)
                    echo "Removing old tag: ${OLD_TAG} locally"
                    sh "docker rmi ${OLD_TAG} || true" // Use '|| true' to ignore errors if the tag does not exist
                }
            }
        }
    }
}
